1. User Upcoming Events:
SELECT usr.full_name, ev.title, ev.start_date
FROM Users usr
INNER JOIN Registrations reg ON usr.user_id = reg.user_id
INNER JOIN Events ev ON reg.event_id = ev.event_id
WHERE ev.status = 'upcoming' AND usr.city = ev.city
ORDER BY ev.start_date;


2. Top Rated Events:
SELECT ev.title, AVG(fb.rating) AS average_rating, COUNT(*) AS feedback_total
FROM Feedback fb
JOIN Events ev ON fb.event_id = ev.event_id
GROUP BY ev.event_id
HAVING COUNT(*) >= 10
ORDER BY average_rating DESC;


3. Inactive Users (no registrations in last 90 days):
SELECT * FROM Users
WHERE user_id NOT IN (
    SELECT user_id FROM Registrations
    WHERE registration_date >= CURDATE() - INTERVAL 90 DAY
);


4. Peak Session Hours (10 AM to 12 PM):
SELECT ev.title, COUNT(*) AS session_count
FROM Sessions ses
JOIN Events ev ON ses.event_id = ev.event_id
WHERE TIME(ses.start_time) BETWEEN '10:00:00' AND '11:59:59'
GROUP BY ses.event_id;


5. Most Active Cities:
SELECT usr.city, COUNT(DISTINCT reg.user_id) AS active_users
FROM Users usr
JOIN Registrations reg ON usr.user_id = reg.user_id
GROUP BY usr.city
ORDER BY active_users DESC
LIMIT 5;

6. Event Resource Summary:
SELECT ev.title,
       SUM(CASE WHEN res.resource_type = 'pdf' THEN 1 ELSE 0 END) AS pdf_count,
       SUM(CASE WHEN res.resource_type = 'image' THEN 1 ELSE 0 END) AS image_count,
       SUM(CASE WHEN res.resource_type = 'link' THEN 1 ELSE 0 END) AS link_count
FROM Resources res
JOIN Events ev ON res.event_id = ev.event_id
GROUP BY res.event_id;

7. Low Feedback Alerts:
SELECT usr.full_name, ev.title, fb.rating, fb.comments
FROM Feedback fb
JOIN Users usr ON fb.user_id = usr.user_id
JOIN Events ev ON fb.event_id = ev.event_id
WHERE fb.rating < 3;


8. Sessions per Upcoming Event:
SELECT ev.title, COUNT(ses.session_id) AS session_total
FROM Events ev
LEFT JOIN Sessions ses ON ev.event_id = ses.event_id
WHERE ev.status = 'upcoming'
GROUP BY ev.event_id;

9. Organizer Event Summary:
SELECT usr.full_name, ev.status, COUNT(*) AS event_count
FROM Events ev
JOIN Users usr ON ev.organizer_id = usr.user_id
GROUP BY usr.user_id, ev.status;


10. Feedback Gap:
SELECT DISTINCT ev.title
FROM Events ev
JOIN Registrations reg ON ev.event_id = reg.event_id
WHERE ev.event_id NOT IN (
    SELECT DISTINCT event_id FROM Feedback
);


11. Daily New User Count (last 7 days):
SELECT registration_date, COUNT(*) AS new_user_count
FROM Users
WHERE registration_date >= CURDATE() - INTERVAL 7 DAY
GROUP BY registration_date;

12. Event with Maximum Sessions:
SELECT ev.title, COUNT(ses.session_id) AS session_count
FROM Events ev
JOIN Sessions ses ON ev.event_id = ses.event_id
GROUP BY ev.event_id
HAVING session_count = (
    SELECT MAX(session_cnt)
    FROM (
        SELECT COUNT(*) AS session_cnt
        FROM Sessions
        GROUP BY event_id
    ) AS session_counts
);

13. Average Rating per City:
SELECT ev.city, AVG(fb.rating) AS avg_rating
FROM Feedback fb
JOIN Events ev ON fb.event_id = ev.event_id
GROUP BY ev.city;


14. Most Registered Events:
SELECT ev.title, COUNT(reg.user_id) AS registration_count
FROM Events ev
JOIN Registrations reg ON ev.event_id = reg.event_id
GROUP BY ev.event_id
ORDER BY registration_count DESC
LIMIT 3;


15. Event Session Time Conflict:
SELECT s1.event_id, s1.session_id AS session_one, s2.session_id AS session_two
FROM Sessions s1
JOIN Sessions s2 ON s1.event_id = s2.event_id
  AND s1.session_id < s2.session_id
  AND s1.end_time > s2.start_time
  AND s1.start_time < s2.end_time;

16. Unregistered Active Users:
SELECT * FROM Users
WHERE registration_date >= CURDATE() - INTERVAL 30 DAY
  AND user_id NOT IN (SELECT user_id FROM Registrations);


17. Multi-Session Speakers:
SELECT speaker_name, COUNT(*) AS session_count
FROM Sessions
GROUP BY speaker_name
HAVING session_count > 1;


18. Events Without Resources:
SELECT title
FROM Events
WHERE event_id NOT IN (SELECT DISTINCT event_id FROM Resources);


19. Completed Events with Feedback Summary:
SELECT ev.title,
       COUNT(DISTINCT reg.user_id) AS total_registrations,
       AVG(fb.rating) AS average_rating
FROM Events ev
LEFT JOIN Registrations reg ON ev.event_id = reg.event_id
LEFT JOIN Feedback fb ON ev.event_id = fb.event_id
WHERE ev.status = 'completed'
GROUP BY ev.event_id;

20. User Engagement Index:
SELECT usr.full_name,
       COUNT(DISTINCT reg.event_id) AS events_attended,
       COUNT(DISTINCT fb.feedback_id) AS feedbacks_given
FROM Users usr
LEFT JOIN Registrations reg ON usr.user_id = reg.user_id
LEFT JOIN Feedback fb ON usr.user_id = fb.user_id
GROUP BY usr.user_id;

21. Top Feedback Providers:
SELECT usr.full_name, COUNT(fb.feedback_id) AS feedback_count
FROM Feedback fb
JOIN Users usr ON fb.user_id = usr.user_id
GROUP BY usr.user_id
ORDER BY feedback_count DESC
LIMIT 5;


22. Duplicate Registrations Check:
SELECT user_id, event_id, COUNT(*) AS duplicates
FROM Registrations
GROUP BY user_id, event_id
HAVING duplicates > 1;

23. Registration Trends (Monthly for last 12 months):
SELECT DATE_FORMAT(registration_date, '%Y-%m') AS month, COUNT(*) AS registrations
FROM Registrations
WHERE registration_date >= CURDATE() - INTERVAL 12 MONTH
GROUP BY month
ORDER BY month;


24. Average Session Duration per Event:
SELECT ev.title,
       AVG(TIMESTAMPDIFF(MINUTE, ses.start_time, ses.end_time)) AS average_duration_minutes
FROM Events ev
JOIN Sessions ses ON ev.event_id = ses.event_id
GROUP BY ev.event_id;

25. Events Without Sessions:
SELECT title
FROM Events
WHERE event_id NOT IN (SELECT DISTINCT event_id FROM Sessions);
