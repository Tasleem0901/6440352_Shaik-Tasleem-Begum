//Exercise 21: Custom Exception
class UnderageException extends Exception {
    public UnderageException(String message) {
        super(message);
    }
}

public class VotingCheck {
    public static void main(String[] args) {
        int age = 16;
        try {
            if (age < 18)
                throw new UnderageException("You must be 18 or older to vote.");
            System.out.println("You can vote.");
        } catch (UnderageException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


//Exercise 22: File Writing
import java.io.*;
import java.util.Scanner;

public class WriteFile {
    public static void main(String[] args) throws IOException {
        Scanner input = new Scanner(System.in);
        System.out.print("Input text to save: ");
        String content = input.nextLine();

        try (FileWriter fw = new FileWriter("data.txt");
             BufferedWriter bw = new BufferedWriter(fw)) {
            bw.write(content);
        }

        System.out.println("Content successfully saved to data.txt.");
    }
}

//Exercise 23: File Reading
import java.io.*;

public class ReadFile {
    public static void main(String[] args) throws IOException {
        try (BufferedReader br = new BufferedReader(new FileReader("data.txt"))) {
            String output;
            while ((output = br.readLine()) != null) {
                System.out.println(output);
            }
        }
    }
}


//Exercise 24: ArrayList Example
import java.util.ArrayList;
import java.util.Scanner;

public class NamesList {
    public static void main(String[] args) {
        ArrayList<String> names = new ArrayList<>();
        Scanner input = new Scanner(System.in);

        System.out.println("Type names (type 'stop' to finish):");
        while (true) {
            String name = input.nextLine();
            if (name.equalsIgnoreCase("stop")) break;
            names.add(name);
        }

        System.out.println("Entered Names:");
        names.forEach(System.out::println);
    }
}


//Exercise 25: HashMap Example
import java.util.HashMap;
import java.util.Scanner;

public class StudentDirectory {
    public static void main(String[] args) {
        HashMap<Integer, String> studentMap = new HashMap<>();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter student ID and name. Use ID -1 to stop.");
        while (true) {
            System.out.print("Student ID: ");
            int id = scanner.nextInt();
            if (id == -1) break;
            scanner.nextLine(); // consume newline
            System.out.print("Name: ");
            String name = scanner.nextLine();
            studentMap.put(id, name);
        }

        System.out.print("Lookup student by ID: ");
        int searchId = scanner.nextInt();
        System.out.println("Result: " + studentMap.getOrDefault(searchId, "No match found"));
    }
}

//Exercise 26: Thread Creation
class PrintThread extends Thread {
    public void run() {
        System.out.println("Thread: " + Thread.currentThread().getName() + " is active.");
    }

    public static void main(String[] args) {
        PrintThread t1 = new PrintThread();
        PrintThread t2 = new PrintThread();
        t1.start();
        t2.start();
    }
}

//Exercise 27: Lambda Expressions
import java.util.List;
import java.util.ArrayList;

public class LambdaSortingDemo {
    public static void main(String[] args) {
        List<String> people = new ArrayList<>();
        people.add("John");
        people.add("Alice");
        people.add("Bob");
        people.add("David");

        // Sorting the list alphabetically without considering case sensitivity
        people.sort((name1, name2) -> name1.compareToIgnoreCase(name2));

        // Display the sorted names
        System.out.println("Sorted Names:");
        people.forEach(name -> System.out.println(name));
    }
}


//Exercise 28: Stream API
import java.util.List;

public class EvenNumberFilter {
    public static void main(String[] args) {
        List.of(12, 17, 22, 29, 34).stream()
            .filter(num -> num % 2 == 0)
            .forEach(System.out::println);
    }
}

//Exercise 29: Records
import java.util.List;

public class FilterAdults {
    record User(String fullName, int age) {}

    public static void main(String[] args) {
        List<User> users = List.of(
            new User("Sam", 19),
            new User("Lina", 25),
            new User("Tom", 17)
        );

        users.stream()
             .filter(user -> user.age() >= 18)
             .forEach(System.out::println);
    }
}


//Exercise 30: Pattern Matching for switch (Java 21)
public class TypeIdentifier {
    public static void identify(Object value) {
        switch (value) {
            case String text -> System.out.println("This is a string: " + text);
            case Integer number -> System.out.println("This is an integer: " + number);
            case Double decimal -> System.out.println("This is a double: " + decimal);
            default -> System.out.println("Type not recognized");
        }
    }

    public static void main(String[] args) {
        identify("World");
        identify(42);
        identify(7.5);
        identify(true); // test default case
    }
}


//Exercise 31: Basic JDBC Connection
import java.sql.*;

public class DatabaseReader {
    public static void main(String[] args) {
        String url = "jdbc:sqlite:students.db";

        try (Connection connection = DriverManager.getConnection(url);
             Statement statement = connection.createStatement();
             ResultSet result = statement.executeQuery("SELECT * FROM students")) {

            while (result.next()) {
                int studentId = result.getInt("id");
                String studentName = result.getString("name");
                System.out.println("ID: " + studentId + ", Name: " + studentName);
            }

        } catch (SQLException e) {
            System.err.println("Database error: " + e.getMessage());
        }
    }
}

//Exercise 32: Insert and Update Operations in JDBC
import java.sql.*;

public class StudentDatabaseHelper {
    private Connection dbConnection;

    public StudentDatabaseHelper() throws SQLException {
        dbConnection = DriverManager.getConnection("jdbc:sqlite:students.db");
    }

    public void addStudent(int studentId, String studentName) throws SQLException {
        String sql = "INSERT INTO students (id, name) VALUES (?, ?)";
        try (PreparedStatement pstmt = dbConnection.prepareStatement(sql)) {
            pstmt.setInt(1, studentId);
            pstmt.setString(2, studentName);
            pstmt.executeUpdate();
        }
    }

    public void modifyStudent(int studentId, String newName) throws SQLException {
        String sql = "UPDATE students SET name = ? WHERE id = ?";
        try (PreparedStatement pstmt = dbConnection.prepareStatement(sql)) {
            pstmt.setString(1, newName);
            pstmt.setInt(2, studentId);
            pstmt.executeUpdate();
        }
    }

    public void close() throws SQLException {
        if (dbConnection != null && !dbConnection.isClosed()) {
            dbConnection.close();
        }
    }
}


// Exercise 33: Transaction Handling in JDBC
import java.sql.*;

public class FundTransfer {
    public static void main(String[] args) {
        String url = "jdbc:sqlite:bank.db";

        try (Connection connection = DriverManager.getConnection(url)) {
            connection.setAutoCommit(false);
            try (Statement statement = connection.createStatement()) {
                statement.executeUpdate("UPDATE accounts SET balance = balance - 100 WHERE id = 1");
                statement.executeUpdate("UPDATE accounts SET balance = balance + 100 WHERE id = 2");
                connection.commit();
                System.out.println("Funds transferred successfully.");
            } catch (SQLException ex) {
                connection.rollback();
                System.out.println("Transaction rolled back due to: " + ex.getMessage());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

//Exercise 34: Create and Use Java Modules
module com.utils {
    exports com.utils;
}


//Exercise 35: TCP Client-Server Chat
Server:
import java.io.*;
import java.net.*;

public class ChatServer {
    public static void main(String[] args) throws IOException {
        try (ServerSocket serverSocket = new ServerSocket(4321);
             Socket clientSocket = serverSocket.accept();
             BufferedReader input = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
             PrintWriter output = new PrintWriter(clientSocket.getOutputStream(), true)) {

            output.println("Hi there, client!");
            String message = input.readLine();
            System.out.println("Received from client: " + message);
        }
    }
}
client:
import java.io.*;
import java.net.*;

public class ChatClient {
    public static void main(String[] args) throws IOException {
        try (Socket socket = new Socket("localhost", 4321);
             BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             PrintWriter writer = new PrintWriter(socket.getOutputStream(), true)) {

            System.out.println("Server says: " + reader.readLine());
            writer.println("Hello from client!");
        }
    }
}

//Exercise 36: HTTP Client API (Java 11+)
import java.net.URI;
import java.net.http.*;

public class HttpClientDemo {
    public static void main(String[] args) throws Exception {
        HttpClient client = HttpClient.newBuilder().build();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI("https://api.github.com"))
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        System.out.println("Response Code: " + response.statusCode());
        System.out.println("Response Body:\n" + response.body());
    }
}


//Exercise 37: Using javap to Inspect Bytecode
Demo.java:
public class ByteCodeDemo {
    public static int multiply(int a, int b) {
        return a * b;
    }

    public static void main(String[] args) {
        System.out.println(multiply(4, 5));
    }
}


Command to Compile and Inspect:
javac ByteCodeDemo.java
javap -c ByteCodeDemo

//Exercise 38: Decompile a Class File
Steps:
Compile: javac HelloWorld.java

Use JD-GUI or CFR:

bash
Copy
Edit
java -jar cfr.jar HelloWorld.class
code:
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello Decompiler");
    }
}


// Exercise 39: Reflection in Java
import java.lang.reflect.Method;

public class ReflectMethods {
    public static void main(String[] args) throws Exception {
        Class<?> clazz = Class.forName("java.util.ArrayList");
        for (Method method : clazz.getDeclaredMethods()) {
            System.out.println(method.getName());
        }
    }
}


//Exercise 40: Virtual Threads (Java 21)
public class VirtualThreadDemo {
    public static void main(String[] args) {
        for (int i = 0; i < 50_000; i++) {
            Thread.startVirtualThread(() -> System.out.println("Hello from virtual thread!"));
        }
    }
}

//Exercise 41: ExecutorService and Callable
import java.util.concurrent.*;
import java.util.*;

public class CallableTasks {
    public static void main(String[] args) throws Exception {
        ExecutorService pool = Executors.newFixedThreadPool(2);

        List<Callable<String>> taskList = Arrays.asList(
            () -> "Result A",
            () -> "Result B",
            () -> "Result C"
        );

        List<Future<String>> outputs = pool.invokeAll(taskList);

        for (Future<String> output : outputs) {
            System.out.println(output.get());
        }

        pool.shutdown();
    }
}
